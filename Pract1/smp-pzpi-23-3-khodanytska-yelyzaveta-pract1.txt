Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки




Катедра програмної інженерії


Звіт
з практичної роботи №1
з дисципліни «Скриптові мови програмування»





Виконала:                                                                 Перевірив:
ст. гр. ПЗПІ-23-3                                                викладач катедри ПІ
Ходаницька Єлизавета                                         Сокорчук Ігор Петрович














Харків - 2025
        1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	01.04.2025
	0.1
	Зроблено звіт
	2
	10.05.2025
	0.2
	Перероблено звіт згідно вимог
	

        2 ЗАВДАННЯ
        Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.


        3 ОПИС ВИКОНАНОЇ РОБОТИ
        3.1 Створення скрипта
Спочатку було створено скрипт за допомоги команди touch (див. рис. Б.1).


        3.2 Додавання права на виконання
        Далі було додано за допомогою команди chmod і +x право для виконання скрипта (див. рис. Б.2).


        3.3 Редагування скрипта
        За допомогою команди mcedit перейшла до безпосереднього написання коду і подальшого його редагування (див. рис. Б.3).


        3.4 Скрипт
        Нижче наведені скриншоти готового скрипта, який виконує наступні вимоги: малює симетричну ялинку, яруси гілок утворюють правильні рівнобедрені трикутники, у яких сусідні рядки відрізняються на два символи та почергово складаються з символів “*” і “#”, висота стовбура(=2) і товщина снігу(=1) є константами, повертає у потік помилок сповіщення про неправильне значення аргумента (>&2) і відповідний результат у батьківський процес (exit 1, exit 0). Також у скрипті використані наступні конструкції і функція:
if ... then ... fi 
while ... do ... done 
until ... do ... done 
for ... in .. do ... done 
for ((...)); do ... done
Вони використані для безпосереднього малювання ярусів, чергування снігу і гілок, відступів, аби утворити трикутники, шару снігу і стовбура ялинки. 
Два аргументи передаються з командного рядка (width_snow і hight_tree) під час виклику функції tree. Далі створюється змінна flag, завдяки якій буде відбуватися чергування шару снігу і гілок.
Далі йдуть перевірки, завдяки яким не допускаються значення, через які буде неможливо побудувати ялинку. Помилки виводяться у стандартний потік помилок.
Далі скрипт переходить до малювання ялинки. Цикли for ((...)); do ... done використовуються для малювання верхньої частини ялинки з відступами, кількість пробілів яких зменшується з кожним новим рядком, для утворення трикутника. Якщо рядок парний, то використовується “#”, якщо непарний — “*”. Змінна flag використовується у даній частині коду для цього чергування символів.
Середня частина ялинки малюється за такою ж аналогією, але тепер використано цикли while ... do ... done і until ... do ... done. 
Стовбур ялинки малюється завдяки двом конструкціям for ... in .. do ... done і for ((...)); do ... done. Спочатку додаємо пробіли, а після символи “#” для малювання стовбура.
Шар снігу малюється завдяки for ((...)); do ... done, залежно від ширини снігу, яка передається на вхід функції. 
При цьому майже у кожному блоці скрипта використано конструкцію if ... then ... fi для перевірки на неправильний ввід значень чи на парність рядків завдяки допоміжній змінній, чи ітерацію циклу. Скрипт наведений нижче:


3.5 Результат виконання скрипта
За допомогою ./ викликаємо скрипт і даємо на вихід значення для друку ялинки на екрані (див. рис. Б.4).
        Якщо за введеними параметрами неможливо побудувати ялинку, то виводяться відповідні помилки (див. рис. Б.5).


        4 ВИСНОВКИ
Під час виконання практичної роботи були вивчені і використані на практиці функція і конструкції if ... then ... fi, while ... do ... done, until ... do ... done, for ... in .. do ... done, for ((...)); do ... done. 


ДОДАТОК А 
Відеозапис
Відеозапис презентації результатів лабораторної роботи: 
        https://youtu.be/KrSgdIJIh0k


Хронологічний опис відеозапису:
00:00 — Пояснення змінних
00:23 — Пояснення перевірок на помилки
00:45 — Пояснення циклу для побудови першого ярусу ялинки
02:35 — Пояснення циклу для побудови другого ярусу ялинки
02:55 — Пояснення циклу для побудови стовбура ялинки
03:00 — Пояснення циклу для побудови шару снігу
03:30 — Демонстрація роботи програми


ДОДАТОК Б 
Графічні матеріали
  

Рисунок Б.1 — Створення скрипта


  

Рисунок Б.2 — Додавання права на виконання


  

Рисунок Б.3 — Редагування скрипта


  

Рисунок Б.4 — Результат виконання скрипта


  

Рисунок Б.5 — Приклад виводу помилки


ДОДАТОК В 
Програмний код
  1 #!/bin/bash
  2
  3 function tree(){
  4 height_tree=$1
  5 width_snow=$2
  6
  7 flag=0
  8
  9 if (( height_tree < width_snow )); then
 10     echo "Висота ялинки має бути більша за ширину снігу." >&2
 11     exit 1
 12 elif (( height_tree < 8 || width_snow < 7 )); then
 13     echo "Параметри не підходять для побудови ялинки." >&2
 14     exit 1
 15 elif (( width_snow <= 0 || height_tree <= 0 )); then
 16     echo "Значення мають бути додатніми." >&2
 17     exit 1
 18 elif (( width_snow < height_tree-2 )); then
 19     echo "Ширина має бути такою ж як ширина яруса ялинки." >&2
 20     exit 1
 21 elif (( (( width_snow==height_tree ))&&(( height_tree%2!=0 && width_snow%2!=0 )) )); then
 22     echo "Помилка! Неможливо побудувати ялинку." >&2
 23     exit 1
 24 elif (( (( width_snow%2==0 && height_tree%2==0 )) && ((width_snow < height_tree-1)) )); then
 25     echo "Помилка! Неможливо побудувати ялинку." >&2
 26     exit 1
 27 else
 28     if ((width_snow%2==0)); then
 29         p=1
 30     else
 31         p=0
 32     fi
 33     mid=width_snow/2
 34     for (( i=1; i<=height_tree/2-1; i++ )); do
 35         for (( j=1; j<=mid-i+1-p; j++ )); do
 36             echo -n " "
 37         done
 38         for (( k=1; k<=2*i-1; k++ )); do
 39             if (( i%2==0 )); then
 40                 echo -n "#"
 41                 flag=0
 42             else
 43                 echo -n "*"
 44                 flag=1
 45             fi
 46         done
 47         echo
 48     done
 49     i=1
 50     while (( i<=height_tree/2-2 )); do
 51         j=1
 52         until (( j>mid-i-p )); do
 53             echo -n " "
 54             (( j++ ))
 55         done
 56         if (( flag==1 )); then
 57             k=1
 58             until (( k>2*i+1 )); do
 59                 echo -n "#"
 60                 (( k++ ))
 61             done
 62             flag=0
 63         else
 64             k=1
 65             until (( k>2*i+1 )); do
 66                 echo -n "*"
 67                 (( k++ ))
 68             done
 69             flag=1
 70         fi
 71         echo
 72         (( i++ ))
 73     done
 74     for i in 1  2; do
 75         for (( j=1; j <=mid-1-p; j++ )); do
 76             echo -n " "
 77         done
 78         for k in {1..3}; do
 79             echo -n "#"
 80         done
 81         echo
 82     done
 83         for (( i=1; i <=width_snow-p; i++ )); do
 84             echo -n "*"
 85         done
 86     echo
 87 fi
 88 }
 89 tree $1 $2
