#!/bin/bash

VERSION="1.0"
SCRIPT_NAME=$(basename "$0")
OUTPUT_PREFIX="Google_"
QUIET=0

show_help() {
    echo "Використання: $SCRIPT_NAME [--help | --version] | [-q|--quiet]"
}

show_version() {
    echo "$SCRIPT_NAME версія $VERSION"
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) show_help; exit 0 ;;
        --version) show_version; exit 0 ;;
        -q|--quiet) QUIET=1; shift ;;
        -*) echo "Невідомий параметр: $1" >&2; exit 1 ;;
        *)
            if [[ -z "$GROUP" ]]; then
                GROUP="$1"
            elif [[ -z "$INPUT_FILE" ]]; then
                INPUT_FILE="$1"
            else
                echo "Забагато параметрів." >&2
                exit 1
            fi
            shift
            ;;
    esac
done

if [[ -z "$INPUT_FILE" ]]; then
    echo "Виберіть CSV-файл:"
    files=( $(ls TimeTable_??_??_20??.csv 2>/dev/null | sort) )
    if [[ ${#files[@]} -eq 0 ]]; then
        echo "Не знайдено TimeTable_??_??_20??.csv у поточній директорії." >&2
        exit 1
    fi
    select f in "${files[@]}"; do
        if [[ -n "$f" ]]; then
            INPUT_FILE="$f"
            break
        else
            echo "Некоректний вибір."
        fi
    done
fi

if [[ ! -f "$INPUT_FILE" ]]; then
    echo "Файл '$INPUT_FILE' не знайдено." >&2
    exit 1
fi

TMP_FILE=$(mktemp)
iconv -f WINDOWS-1251 -t UTF-8 "$INPUT_FILE" | tr '\r' '\n' > "$TMP_FILE"

if [[ -z "$GROUP" ]]; then
    echo "Виберіть академічну групу:"
    groups=( $(grep -oE '[А-Яа-яA-Za-zІіЇїЄєҐґ]{2,10}-[0-9]{2}-[0-9]' "$TMP_FILE" | sort -u) )
    if [[ ${#groups[@]} -eq 0 ]]; then
        echo "Не знайдено жодної групи у файлі." >&2
        rm -f "$TMP_FILE"
        exit 1
    fi
    select g in "${groups[@]}"; do
        if [[ -n "$g" ]]; then
            GROUP="$g"
            break
        else
            echo "Некоректний вибір."
        fi
    done
fi

BASE_NAME=$(basename "$INPUT_FILE" .csv)
OUTPUT_FILE="${OUTPUT_PREFIX}${BASE_NAME}.csv"

declare -A lesson_counters
declare -A lab_block_counter
declare -A lab_dates_seen

echo '"Subject","Start Date","Start Time","End Date","End Time","Description"' > "$OUTPUT_FILE"
{
    read -r header
    while IFS= read -r line; do
        fields=()
        tmp_line="$line"
        while [[ $tmp_line =~ ^\"([^\"]*)\"(,?)(.*) ]]; do
            fields+=("${BASH_REMATCH[1]}")
            tmp_line=${BASH_REMATCH[3]}
        done

        subject="${fields[0]}"
        start_date="${fields[1]}"
        start_time="${fields[2]}"
        end_date="${fields[3]}"
        end_time="${fields[4]}"
        description="${fields[11]}"

        clean_subject=$(echo "$subject" | tr -d '()*"' | sed 's/--/-/g')
        clean_description=$(echo "$description" | tr -d '()*"' | sed 's/--/-/g')

        if [[ "$clean_subject" != *"$GROUP"* && "$clean_description" != *"$GROUP"* ]]; then
            continue
        fi

        subject=$(echo "$subject" | sed -E 's/^[A-Za-zА-Яа-яІіЇїЄєҐґ0-9]{2,10}-[0-9]{2}-[0-9] - //')

        if echo "$subject" | grep -q '\<Лб\>' ; then
            lesson_type="Лб"
        else
            lesson_type="Інше"
        fi

        if [[ "$lesson_type" == "Лб" ]]; then
            lab_subject_key=$(echo "$subject" | tr -d '()*"' | sed 's/--/-/g' | tr -s ' ')
            date_key="${lab_subject_key}_${start_date}"

            if [[ -z "${lab_dates_seen[$date_key]}" ]]; then
                lab_block_counter[$lab_subject_key]=${lab_block_counter[$lab_subject_key]:-0}
                lab_block_counter[$lab_subject_key]=$((lab_block_counter[$lab_subject_key] + 1))
                lab_dates_seen[$date_key]=${lab_block_counter[$lab_subject_key]}
            fi

            block_number=${lab_dates_seen[$date_key]}
        else
            subject_key=$(echo "${subject}_${lesson_type}" | tr -d '()*"' | sed 's/--/-/g' | tr -s ' ')
            lesson_counters[$subject_key]=${lesson_counters[$subject_key]:-0}
            lesson_counters[$subject_key]=$((lesson_counters[$subject_key] + 1))
            block_number=${lesson_counters[$subject_key]}
        fi

        subject="${subject}; №$block_number"

        start_hour_raw=${start_time%%:*}
        start_minute_second=${start_time#*:}
        start_minute=${start_minute_second%%:*}
        start_hour=$((10#$start_hour_raw))
        am_pm="AM"
        if (( start_hour >= 12 )); then
            am_pm="PM"
            if (( start_hour > 12 )); then
                start_hour=$((start_hour - 12))
            fi
        elif (( start_hour == 0 )); then
            start_hour=12
        fi
        start_time_12h=$(printf "%d:%02d %s" "$start_hour" "$start_minute" "$am_pm")

        end_hour_raw=${end_time%%:*}
        end_minute_second=${end_time#*:}
        end_minute=${end_minute_second%%:*}
        end_hour=$((10#$end_hour_raw))
        am_pm_end="AM"
        if (( end_hour >= 12 )); then
            am_pm_end="PM"
            if (( end_hour > 12 )); then
                end_hour=$((end_hour - 12))
            fi
        elif (( end_hour == 0 )); then
            end_hour=12
        fi
        end_time_12h=$(printf "%d:%02d %s" "$end_hour" "$end_minute" "$am_pm_end")

        printf '"%s","%s","%s","%s","%s","%s"\n' \
            "$subject" "$start_date" "$start_time_12h" "$end_date" "$end_time_12h" "$description" >> "$OUTPUT_FILE"

        if [[ $QUIET -eq 0 ]]; then
            printf '"%s","%s","%s","%s","%s","%s"\n' \
                "$subject" "$start_date" "$start_time_12h" "$end_date" "$end_time_12h" "$description"
        fi
    done
} < "$TMP_FILE"

rm -f "$TMP_FILE"
echo "Розклад для Google календаря: $OUTPUT_FILE"
exit 0
